//import java.util.Arrays;
//import java.util.List;
//import java.util.Vector;
//
//public class Expression extends Expression {
//
//    private final OperatorList operatorList;
//    private final ExpressionList expressionList;
//
//    public Expression(List<Operator> operatorList, Expression... expressionList) {
//        this(operatorList, Arrays.stream(expressionList).toList());
//    }
//
//    public Expression(List<Operator> operatorList, List<Expression> expressionList) {
//        this.operatorList = OperatorList.of(operatorList);
//        this.expressionList = ExpressionList.of(expressionList);
//    }
//
//    public Expression(Expression expression) {
//        this.expressionList = ExpressionList.of(expression);
//        this.operatorList = OperatorList.emptyList();
//    }
//
//    public List<Operator> getOperators() {
//        return operatorList;
//    }
//
//    public List<Expression> getOperands() {
//        return expressionList;
//    }
//
//    public static Expression from(Expression leftOperand, Operator operator, Expression rightExpression) {
//        return leftOperand.concat(operator, rightExpression);
//    }
//
//    @Override
//    public Expression concat(Operator operator, Expression rightExpression) {
//        if(rightExpression instanceof Number) {
//            return this.atLevel(operator.getLevel()).with(operator, (Number)rightExpression);
//        }
//        if(rightExpression instanceof Variable) {
//            return this.atLevel(operator.getLevel()).with(operator, (Variable)rightExpression);
//        }
//        if (rightExpression instanceof Expression) {
//            return this.atLevel(operator.getLevel()).with(operator, ((Expression)rightExpression).operatorList, ((Expression)rightExpression).expressionList);
//        }
//        throw new RuntimeException("Not implemented");
//    }
//
//    @Override
//    public Expression atLevel(Integer level) {
//        if (this.getLevel() <= level) {
//            return this;
//        }
//        return new Expression(OperatorList.emptyList(), this);
//
//    }
//
//    private Expression with(Operator operator, OperatorList operatorList, ExpressionList expressionList) {
//        var newOperatorList = this.operatorList
//                .concat(operator)
//                .concat(operatorList);
//        var newOperandList = this.expressionList
//                .concat(expressionList);
//        return new Expression(
//                newOperatorList,
//                newOperandList
//        );
//    }
//
//    protected Expression with(Operator operator, Expression expression) {
//        var operatorList = this.operatorList
//                .concat(operator);
//        var expressionList = this.expressionList.concat(expression);
//        return new Expression(
//                operatorList,
//                expressionList
//        );
//    }
//
//
//    @Override
//    boolean isVariable() {
//        return false;
//    }
//
//    @Override
//    boolean isNumber() {
//        return false;
//    }
//
//    @Override
//    Double getValue() {
//        throw new RuntimeException("Unsupported operation");
//    }
//
//    @Override
//    Integer getLevel() {
//        return operatorList.maxLevel();
//    }
//
//    @Override
//    String asString() {
//        var stringBuilder = new StringBuilder();
//        stringBuilder.append("(");
//        stringBuilder.append(expressionList.get(0).asString());
//        for (int i = 0; i < operatorList.size(); i++) {
//            stringBuilder.append(operatorList.get(0).getValue());
//            stringBuilder.append(expressionList.get(i + 1).asString());
//        }
//        stringBuilder.append(")");
//        return stringBuilder.toString();
//    }
//
//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//
//        Expression that = (Expression) o;
//
//        if (!operatorList.equals(that.operatorList)) return false;
//        return expressionList.equals(that.expressionList);
//    }
//
//    @Override
//    public int hashCode() {
//        int result = operatorList.hashCode();
//        result = 31 * result + expressionList.hashCode();
//        return result;
//    }
//}
